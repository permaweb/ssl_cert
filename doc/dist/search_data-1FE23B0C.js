searchData={"items":[{"type":"module","title":"acme_client","doc":"ACME client module for Let's Encrypt certificate management.\n\nThis module provides the main API for ACME (Automatic Certificate Management\nEnvironment) v2 protocol operations. It serves as a facade that orchestrates\ncalls to specialized modules for HTTP communication, cryptographic operations,\nCSR generation, and protocol implementation.\n\nThe module supports both staging and production Let's Encrypt environments\nand provides comprehensive logging through HyperBEAM's event system.\n\nThis refactored version delegates complex operations to specialized modules:\n- acme_protocol: Core ACME protocol operations\n- acme_http: HTTP client and communication\n- acme_crypto: Cryptographic operations and JWS\n- acme_csr: Certificate Signing Request generation\n- acme_url: URL parsing and manipulation utilities","ref":"acme_client.html"},{"type":"function","title":"acme_client.base64url_encode/1","doc":"Encodes data using base64url encoding.","ref":"acme_client.html#base64url_encode/1"},{"type":"function","title":"acme_client.create_account/2","doc":"Creates a new ACME account with Let's Encrypt.","ref":"acme_client.html#create_account/2"},{"type":"function","title":"acme_client.determine_directory_from_url/1","doc":"Determines the ACME directory URL from any ACME endpoint URL.","ref":"acme_client.html#determine_directory_from_url/1"},{"type":"function","title":"acme_client.download_certificate/2","doc":"Downloads the certificate from the ACME server.","ref":"acme_client.html#download_certificate/2"},{"type":"function","title":"acme_client.extract_base_url/1","doc":"Extracts the base URL (scheme + host) from a complete URL.","ref":"acme_client.html#extract_base_url/1"},{"type":"function","title":"acme_client.extract_host_from_url/1","doc":"Extracts the host from a URL.","ref":"acme_client.html#extract_host_from_url/1"},{"type":"function","title":"acme_client.extract_path_from_url/1","doc":"Extracts the path from a URL.","ref":"acme_client.html#extract_path_from_url/1"},{"type":"function","title":"acme_client.finalize_order/3","doc":"Finalizes a certificate order after all challenges are validated.","ref":"acme_client.html#finalize_order/3"},{"type":"function","title":"acme_client.get_challenge_status/2","doc":"Retrieves current challenge status using POST-as-GET.","ref":"acme_client.html#get_challenge_status/2"},{"type":"function","title":"acme_client.get_dns_challenge/2","doc":"Retrieves DNS-01 challenges for all domains in an order.","ref":"acme_client.html#get_dns_challenge/2"},{"type":"function","title":"acme_client.get_fresh_nonce/1","doc":"Gets a fresh nonce from the ACME server.","ref":"acme_client.html#get_fresh_nonce/1"},{"type":"function","title":"acme_client.get_nonce/0","doc":"Generates a random nonce for JWS requests (fallback).","ref":"acme_client.html#get_nonce/0"},{"type":"function","title":"acme_client.get_order/2","doc":"Fetches the latest state of an order (POST-as-GET).","ref":"acme_client.html#get_order/2"},{"type":"function","title":"acme_client.make_jws_post_as_get_request/3","doc":"Creates and sends a JWS POST-as-GET request.","ref":"acme_client.html#make_jws_post_as_get_request/3"},{"type":"function","title":"acme_client.request_certificate/2","doc":"Requests a certificate for the specified domains.","ref":"acme_client.html#request_certificate/2"},{"type":"function","title":"acme_client.validate_challenge/2","doc":"Validates a DNS challenge with the ACME server.","ref":"acme_client.html#validate_challenge/2"},{"type":"type","title":"acme_client.acme_account/0","doc":"ACME account record containing private key, URL, and key ID.","ref":"acme_client.html#t:acme_account/0"},{"type":"type","title":"acme_client.acme_environment/0","doc":"ACME environment type - staging or production.","ref":"acme_client.html#t:acme_environment/0"},{"type":"type","title":"acme_client.acme_order/0","doc":"ACME order record containing order details and status.","ref":"acme_client.html#t:acme_order/0"},{"type":"type","title":"acme_client.dns_challenge/0","doc":"DNS challenge record for domain validation.","ref":"acme_client.html#t:dns_challenge/0"},{"type":"type","title":"acme_client.domain_list/0","doc":"List of domain names as strings.","ref":"acme_client.html#t:domain_list/0"},{"type":"type","title":"acme_client.email_address/0","doc":"Email address as a string.","ref":"acme_client.html#t:email_address/0"},{"type":"type","title":"acme_client.request_state/0","doc":"Request state map with binary keys and arbitrary values.","ref":"acme_client.html#t:request_state/0"},{"type":"type","title":"acme_client.validation_result/0","doc":"Validation result map with binary keys and values.","ref":"acme_client.html#t:validation_result/0"},{"type":"module","title":"acme_crypto","doc":"ACME cryptography module.\n\nThis module provides cryptographic operations for ACME (Automatic Certificate\nManagement Environment) protocol implementation. It handles RSA key generation,\nJWK (JSON Web Key) operations, JWS (JSON Web Signature) creation, and various\nencoding/decoding utilities required for secure ACME communication.","ref":"acme_crypto.html"},{"type":"function","title":"acme_crypto.base64url_decode/1","doc":"Decodes base64url encoded data.\n\nThis function decodes base64url encoded strings back to binary data.\nIt handles the URL-safe character set and adds padding if necessary.\n\n@param Data The base64url-encoded string\n@returns The decoded binary data","ref":"acme_crypto.html#base64url_decode/1"},{"type":"function","title":"acme_crypto.base64url_encode/1","doc":"Encodes data using base64url encoding.\n\nThis function implements base64url encoding as specified in RFC 4648,\nwhich is required for JWS and other ACME protocol components. It differs\nfrom standard base64 by using URL-safe characters and omitting padding.\n\n@param Data The data to encode (binary or string)\n@returns The base64url-encoded string","ref":"acme_crypto.html#base64url_encode/1"},{"type":"function","title":"acme_crypto.create_jws_header/4","doc":"Creates a JWS header for ACME requests.\n\nThis function creates the protected header for JWS (JSON Web Signature)\nrequests as required by the ACME protocol. It handles both new account\ncreation (using JWK) and existing account requests (using KID).\n\n@param Url The target URL for the request\n@param PrivateKey The account's private key\n@param Kid The account's key identifier (undefined for new accounts)\n@param Nonce The fresh nonce from the ACME server\n@returns A map representing the JWS header","ref":"acme_crypto.html#create_jws_header/4"},{"type":"function","title":"acme_crypto.create_jws_signature/3","doc":"Creates a JWS signature for the given header and payload.\n\nThis function creates a JWS signature by signing the concatenated\nbase64url-encoded header and payload with the private key using\nRS256 (RSA with SHA-256).\n\n@param HeaderB64 The base64url-encoded header\n@param PayloadB64 The base64url-encoded payload\n@param PrivateKey The private key for signing\n@returns The base64url-encoded signature","ref":"acme_crypto.html#create_jws_signature/3"},{"type":"function","title":"acme_crypto.generate_dns_txt_value/1","doc":"Generates the DNS TXT record value from key authorization.\n\nThis function creates the value that should be placed in a DNS TXT record\nfor DNS-01 challenge validation. It computes the SHA-256 hash of the\nkey authorization string and encodes it using base64url.\n\n@param KeyAuthorization The key authorization string\n@returns The base64url-encoded SHA-256 hash for the DNS TXT record","ref":"acme_crypto.html#generate_dns_txt_value/1"},{"type":"function","title":"acme_crypto.generate_key_authorization/2","doc":"Generates the key authorization string for a challenge.\n\nThis function creates the key authorization string required for ACME\nchallenges by concatenating the challenge token with the JWK thumbprint.\nThis is used in DNS-01 and other challenge types.\n\n@param Token The challenge token from the ACME server\n@param PrivateKey The account's private key\n@returns The key authorization string (Token.JWK_Thumbprint)","ref":"acme_crypto.html#generate_key_authorization/2"},{"type":"function","title":"acme_crypto.get_jwk_thumbprint/1","doc":"Computes the JWK thumbprint for an RSA private key.\n\nThis function creates a JWK thumbprint according to RFC 7638, which is\nused in ACME protocol for key identification and challenge generation.\nThe thumbprint is computed by hashing the canonical JSON representation\nof the JWK.\n\n@param PrivateKey The RSA private key\n@returns The base64url-encoded JWK thumbprint as string","ref":"acme_crypto.html#get_jwk_thumbprint/1"},{"type":"function","title":"acme_crypto.private_key_to_jwk/1","doc":"Converts an RSA private key to JWK (JSON Web Key) format.\n\nThis function extracts the public key components (modulus and exponent)\nfrom an RSA private key and formats them according to RFC 7517 JWK\nspecification for use in ACME protocol communication.\n\n@param PrivateKey The RSA private key record\n@returns A map representing the JWK with required fields","ref":"acme_crypto.html#private_key_to_jwk/1"},{"type":"function","title":"acme_crypto.sign_data/3","doc":"Signs data with the specified algorithm and private key.\n\nThis function provides a general-purpose signing interface for\nvarious cryptographic operations needed in ACME protocol.\n\n@param Data The data to sign (binary or string)\n@param Algorithm The signing algorithm (e.g., sha256)\n@param PrivateKey The private key for signing\n@returns The signature as binary","ref":"acme_crypto.html#sign_data/3"},{"type":"module","title":"acme_csr","doc":"ACME Certificate Signing Request (CSR) generation module.\n\nThis module handles the complex process of generating Certificate Signing\nRequests (CSRs) for ACME certificate issuance. It manages ASN.1 encoding,\nX.509 certificate request formatting, Subject Alternative Name (SAN) extensions,\nand proper handling of both DNS names and IP addresses.\n\nThe module provides comprehensive CSR generation with support for multiple\ndomains, proper ASN.1 structure creation, and compatibility with various\nCertificate Authorities including Let's Encrypt.","ref":"acme_csr.html"},{"type":"function","title":"acme_csr.create_complete_rsa_key_from_wallet/3","doc":"Creates a complete RSA private key from wallet components.\n\nThis function takes the basic RSA components from the wallet and creates\na complete RSA private key that can be properly serialized. It computes\nthe missing prime factors and coefficients needed for full compatibility.\n\n@param Modulus The RSA modulus (n)\n@param PublicExponent The public exponent (e)\n@param PrivateExponent The private exponent (d)\n@returns Complete RSA private key record","ref":"acme_csr.html#create_complete_rsa_key_from_wallet/3"},{"type":"function","title":"acme_csr.create_extension_request_attribute/1","doc":"Creates an extension request attribute for CSR.\n\nThis function creates the pkcs-9-at-extensionRequest attribute\nthat contains the X.509 extensions for the certificate request.\n\n@param Extension The X.509 extension to include\n@returns Attribute structure for the CSR","ref":"acme_csr.html#create_extension_request_attribute/1"},{"type":"function","title":"acme_csr.create_subject/1","doc":"Creates the certificate subject with Common Name.\n\nThis function creates the X.509 certificate subject structure with\nthe specified Common Name. The subject is formatted according to\nASN.1 Distinguished Name encoding requirements.\n\n@param CommonName The domain name to use as Common Name\n@returns ASN.1 encoded subject structure","ref":"acme_csr.html#create_subject/1"},{"type":"function","title":"acme_csr.create_subject_alt_name_extension/1","doc":"Creates a Subject Alternative Name extension for multiple domains.\n\nThis function creates an X.509 Subject Alternative Name extension\ncontaining all the domains for the certificate. It properly handles\nboth DNS names and IP addresses according to RFC 5280.\n\n@param Domains List of domain names and/or IP addresses\n@returns X.509 Extension structure for Subject Alternative Names","ref":"acme_csr.html#create_subject_alt_name_extension/1"},{"type":"function","title":"acme_csr.generate_csr/2","doc":"Generates a Certificate Signing Request for the specified domains.\n\nThis is the main entry point for CSR generation. It validates the input\ndomains, extracts the RSA key material from the wallet, and creates a\nproperly formatted X.509 certificate request with Subject Alternative Names.\n\n@param Domains List of domain names for the certificate\n@param RSAPrivKey RSA private key\n@returns {ok, CSR_DER, PrivateKey} on success, {error, Reason} on failure","ref":"acme_csr.html#generate_csr/2"},{"type":"function","title":"acme_csr.generate_csr_internal/2","doc":"Internal CSR generation with comprehensive error handling.\n\nThis function performs the complete CSR generation process:\n1. Validates and normalizes domain names\n2. Extracts RSA key material from the wallet\n3. Creates the certificate request structure\n4. Handles Subject Alternative Name extensions\n5. Signs the request with the private key\n\n@param Domains0 List of domain names (may contain empty strings)\n@param RSAPrivKey RSA private key\n@returns {ok, CSR_DER, PrivateKey} on success, {error, Reason} on failure","ref":"acme_csr.html#generate_csr_internal/2"},{"type":"function","title":"acme_csr.ip_address_to_binary/1","doc":"Converts an IP address string to binary format.\n\nThis function converts IP address strings to the binary format\nrequired for X.509 iPAddress GeneralName entries.\n\n@param IPBinary The IP address as binary string\n@returns Binary representation of the IP address","ref":"acme_csr.html#ip_address_to_binary/1"},{"type":"function","title":"acme_csr.is_ip_address/1","doc":"Checks if a domain string represents an IP address.\n\n@param Domain The domain string to check\n@returns true if it's an IP address, false if it's a DNS name","ref":"acme_csr.html#is_ip_address/1"},{"type":"function","title":"acme_csr.normalize_asn1_params/1","doc":"Normalizes ASN.1 algorithm parameters for compatibility.\n\nSome OTP versions require OPEN TYPE wrapping for AlgorithmIdentifier\nparameters. This function ensures compatibility across different versions.\n\n@param Params The original parameters\n@returns Normalized parameters","ref":"acme_csr.html#normalize_asn1_params/1"},{"type":"function","title":"acme_csr.normalize_domain/1","doc":"Normalizes a domain name to binary format.\n\n@param Domain Domain name as string or binary\n@returns Normalized domain as binary","ref":"acme_csr.html#normalize_domain/1"},{"type":"function","title":"acme_csr.validate_all_domains/1","doc":"Validates all domains in a list.\n\nThis function validates each domain in the provided list and returns\neither all validated domains or the first validation error encountered.\n\n@param Domains List of domains to validate\n@returns {ok, ValidatedDomains} or {error, Reason}","ref":"acme_csr.html#validate_all_domains/1"},{"type":"function","title":"acme_csr.validate_domains/1","doc":"Validates and normalizes a list of domain names.\n\nThis function validates domain names, removes empty strings,\nnormalizes formats, and ensures at least one valid domain exists.\n\n@param Domains0 List of domain names (may contain empty strings)\n@returns {ok, [NormalizedDomain]} or {error, Reason}","ref":"acme_csr.html#validate_domains/1"},{"type":"function","title":"acme_csr.validate_single_domain/1","doc":"Validates a single domain name.\n\nThis function performs basic validation on a single domain name\nto ensure it meets basic formatting requirements.\n\n@param Domain The domain to validate\n@returns {ok, ValidatedDomain} or {error, {invalid_domain, Reason}}","ref":"acme_csr.html#validate_single_domain/1"},{"type":"module","title":"acme_http","doc":"ACME HTTP client module.\n\nThis module provides HTTP client functionality specifically designed for\nACME (Automatic Certificate Management Environment) protocol communication.\nIt handles JWS (JSON Web Signature) requests, nonce management, error handling,\nand response processing required for secure communication with ACME servers.","ref":"acme_http.html"},{"type":"function","title":"acme_http.extract_location_header/1","doc":"Extracts the location header from HTTP response headers.\n\nThis function handles both map and proplist header formats and\nextracts the Location header value, which is used for account\nand order URLs in ACME responses.\n\n@param Headers The HTTP response headers\n@returns The location header value as string, or undefined if not found","ref":"acme_http.html#extract_location_header/1"},{"type":"function","title":"acme_http.extract_nonce_header/1","doc":"Extracts the replay-nonce header from HTTP response headers.\n\nThis function handles both map and proplist header formats and\nextracts the replay-nonce header value used for ACME nonce management.\n\n@param Headers The HTTP response headers\n@returns The nonce header value as string, or undefined if not found","ref":"acme_http.html#extract_nonce_header/1"},{"type":"function","title":"acme_http.fallback_random_nonce/0","doc":"Generates a fallback random nonce with logging.\n\n@returns A base64url-encoded random nonce","ref":"acme_http.html#fallback_random_nonce/0"},{"type":"function","title":"acme_http.get_directory/1","doc":"Retrieves the ACME directory from the specified URL.\n\nThis function fetches and parses the ACME directory document which\ncontains the URLs for various ACME endpoints (newAccount, newOrder, etc.).\n\n@param DirectoryUrl The ACME directory URL\n@returns A map containing the directory endpoints\n@raises {directory_fetch_failed, Reason} if the directory cannot be retrieved","ref":"acme_http.html#get_directory/1"},{"type":"function","title":"acme_http.get_fresh_nonce/1","doc":"Gets a fresh nonce from the ACME server.\n\nThis function retrieves a fresh nonce from Let's Encrypt's newNonce\nendpoint as required by the ACME v2 protocol. Each JWS request must\nuse a unique nonce to prevent replay attacks. It includes fallback\nto random nonces if the server is unreachable.\n\n@param DirectoryUrl The ACME directory URL to get newNonce endpoint\n@returns A base64url-encoded nonce string","ref":"acme_http.html#get_fresh_nonce/1"},{"type":"function","title":"acme_http.get_nonce/0","doc":"Generates a random nonce for JWS requests (fallback).\n\nThis function provides a fallback nonce generation mechanism when\nthe ACME server's newNonce endpoint is unavailable.\n\n@returns A base64url-encoded nonce string","ref":"acme_http.html#get_nonce/0"},{"type":"function","title":"acme_http.make_acme_post_request/2","doc":"Makes an ACME POST request with standard headers and logging.\n\n@param Url The URL to POST to\n@param Body The request body\n@returns {ok, StatusCode, Headers, Body} or {error, Reason}","ref":"acme_http.html#make_acme_post_request/2"},{"type":"function","title":"acme_http.make_get_request/1","doc":"Makes a GET request to the specified URL.\n\nThis function performs a simple HTTP GET request with appropriate\nuser agent headers and error handling for ACME protocol communication.\n\n@param Url The target URL\n@returns {ok, ResponseBody} on success, {error, Reason} on failure","ref":"acme_http.html#make_get_request/1"},{"type":"function","title":"acme_http.make_jws_post_as_get_request/3","doc":"Creates and sends a JWS POST-as-GET (empty payload) request per ACME spec.\n\nSome ACME resources require POST-as-GET with an empty payload according to\nRFC 8555. This function creates such requests with proper JWS signing\nbut an empty payload string.\n\n@param Url Target URL\n@param PrivateKey Account private key\n@param Kid Account key identifier (KID)\n@returns {ok, Response, Headers} or {error, Reason}","ref":"acme_http.html#make_jws_post_as_get_request/3"},{"type":"function","title":"acme_http.make_jws_request/4","doc":"Creates and sends a JWS-signed request to the ACME server.\n\nThis function creates a complete JWS (JSON Web Signature) request according\nto the ACME v2 protocol specification. It handles nonce retrieval, header\ncreation, payload signing, and HTTP communication with comprehensive error\nhandling and logging.\n\n@param Url The target URL\n@param Payload The request payload map\n@param PrivateKey The account's private key\n@param Kid The account's key identifier (undefined for new accounts)\n@returns {ok, Response, Headers} on success, {error, Reason} on failure","ref":"acme_http.html#make_jws_request/4"},{"type":"function","title":"acme_http.process_http_response/3","doc":"Processes HTTP response based on status code and content.\n\n@param StatusCode The HTTP status code\n@param ResponseHeaders The response headers\n@param ResponseBody The response body\n@returns {ok, Response, Headers} or {error, ErrorInfo}","ref":"acme_http.html#process_http_response/3"},{"type":"module","title":"acme_protocol","doc":"ACME protocol implementation module.\n\nThis module implements the core ACME (Automatic Certificate Management\nEnvironment) v2 protocol operations for automated certificate issuance\nand management. It handles account creation, certificate orders, challenge\nprocessing, order finalization, and certificate download according to RFC 8555.\n\nThe module provides high-level protocol operations that orchestrate the\nlower-level HTTP, cryptographic, and CSR generation operations.","ref":"acme_protocol.html"},{"type":"function","title":"acme_protocol.create_account/2","doc":"Creates a new ACME account with Let's Encrypt.\n\nThis function performs the complete account creation process:\n1. Determines the ACME directory URL based on environment\n2. Generates a proper RSA key pair for the ACME account\n3. Retrieves the ACME directory to get service endpoints\n4. Creates a new account by agreeing to terms of service\n5. Returns an account record with key, URL, and key identifier\n\nRequired configuration in Config map:\n- environment: 'staging' or 'production'\n- email: Contact email for the account\n\nNote: The account uses a generated RSA key, while CSR generation uses\nthe wallet key. This ensures proper key serialization for account management.\n\n@param Config A map containing account creation parameters\n@returns {ok, Account} on success with account details, or\n{error, Reason} on failure with error information","ref":"acme_protocol.html#create_account/2"},{"type":"function","title":"acme_protocol.download_certificate/2","doc":"Downloads the certificate from the ACME server.\n\nThis function retrieves the issued certificate when the order status is 'valid'.\nThe returned PEM typically contains the end-entity certificate followed\nby intermediate certificates.\n\n@param _Account The ACME account record (used for authentication)\n@param Order The finalized certificate order\n@returns {ok, CertificatePEM} on success with certificate chain, or {error, Reason} on failure","ref":"acme_protocol.html#download_certificate/2"},{"type":"function","title":"acme_protocol.extract_location_as_string/1","doc":"Extracts location header and converts to string format.\n\n@param Headers HTTP response headers\n@returns Location as string or undefined","ref":"acme_protocol.html#extract_location_as_string/1"},{"type":"function","title":"acme_protocol.finalize_order/3","doc":"Finalizes a certificate order after all challenges are validated.\n\nThis function completes the certificate issuance process:\n1. Generates a Certificate Signing Request (CSR) for the domains\n2. Uses the RSA key pair from wallet for the certificate\n3. Submits the CSR to the ACME server's finalize endpoint\n4. Returns the updated order and the certificate private key for nginx\n\n@param Account The ACME account record\n@param Order The certificate order with validated challenges\n@param Opts Configuration options for CSR generation\n@returns {ok, UpdatedOrder, CertificateKey} on success, or {error, Reason} on failure","ref":"acme_protocol.html#finalize_order/3"},{"type":"function","title":"acme_protocol.find_dns_challenge/1","doc":"Finds the DNS-01 challenge in a list of challenges.\n\n@param Challenges A list of challenge maps\n@returns {ok, Challenge} if found, {error, not_found} otherwise","ref":"acme_protocol.html#find_dns_challenge/1"},{"type":"function","title":"acme_protocol.get_authorization/1","doc":"Retrieves authorization details from the ACME server.\n\n@param AuthzUrl The authorization URL\n@returns {ok, Authorization} on success, {error, Reason} on failure","ref":"acme_protocol.html#get_authorization/1"},{"type":"function","title":"acme_protocol.get_challenge_status/2","doc":"Retrieves current challenge status using POST-as-GET (does not trigger).\n\n@param Account The ACME account\n@param Challenge The challenge record\n@returns {ok, Status} on success, {error, Reason} on failure","ref":"acme_protocol.html#get_challenge_status/2"},{"type":"function","title":"acme_protocol.get_dns_challenge/2","doc":"Retrieves DNS-01 challenges for all domains in an order.\n\nThis function processes each authorization in the order:\n1. Fetches authorization details from each authorization URL\n2. Locates the DNS-01 challenge within each authorization\n3. Generates the key authorization string for each challenge\n4. Computes the DNS TXT record value using SHA-256 hash\n5. Returns a list of DNS challenge records with all required information\n\n@param Account The ACME account record\n@param Order The certificate order from request_certificate/2\n@returns {ok, [DNSChallenge]} on success with challenge list, or {error, Reason} on failure","ref":"acme_protocol.html#get_dns_challenge/2"},{"type":"function","title":"acme_protocol.get_order/2","doc":"Fetches the latest state of an order (POST-as-GET).\n\n@param Account The ACME account\n@param OrderUrl The order URL\n@returns {ok, OrderMap} with at least status and optional certificate, or {error, Reason}","ref":"acme_protocol.html#get_order/2"},{"type":"function","title":"acme_protocol.request_certificate/2","doc":"Requests a certificate for the specified domains.\n\nThis function initiates the certificate issuance process:\n1. Determines the ACME directory URL from the account\n2. Creates domain identifiers for the certificate request\n3. Submits a new order request to the ACME server\n4. Returns an order record with authorization URLs and status\n\n@param Account The ACME account record from create_account/1\n@param Domains A list of domain names for the certificate\n@returns {ok, Order} on success with order details, or {error, Reason} on failure","ref":"acme_protocol.html#request_certificate/2"},{"type":"function","title":"acme_protocol.validate_challenge/2","doc":"Validates a DNS challenge with the ACME server.\n\nThis function notifies the ACME server that the DNS TXT record has been\ncreated and requests validation. After calling this function, the challenge\nstatus should be polled until it becomes 'valid' or 'invalid'.\n\n@param Account The ACME account record\n@param Challenge The DNS challenge record from get_dns_challenge/2\n@returns {ok, Status} on success with challenge status, or {error, Reason} on failure","ref":"acme_protocol.html#validate_challenge/2"},{"type":"type","title":"acme_protocol.acme_account/0","doc":"ACME account record containing private key, URL, and key ID.","ref":"acme_protocol.html#t:acme_account/0"},{"type":"type","title":"acme_protocol.acme_environment/0","doc":"ACME environment type - staging or production.","ref":"acme_protocol.html#t:acme_environment/0"},{"type":"type","title":"acme_protocol.acme_order/0","doc":"ACME order record containing order details and status.","ref":"acme_protocol.html#t:acme_order/0"},{"type":"type","title":"acme_protocol.dns_challenge/0","doc":"DNS challenge record for domain validation.","ref":"acme_protocol.html#t:dns_challenge/0"},{"type":"type","title":"acme_protocol.domain_list/0","doc":"List of domain names as strings.","ref":"acme_protocol.html#t:domain_list/0"},{"type":"type","title":"acme_protocol.email_address/0","doc":"Email address as a string.","ref":"acme_protocol.html#t:email_address/0"},{"type":"type","title":"acme_protocol.request_state/0","doc":"Request state map with binary keys and arbitrary values.","ref":"acme_protocol.html#t:request_state/0"},{"type":"type","title":"acme_protocol.validation_result/0","doc":"Validation result map with binary keys and values.","ref":"acme_protocol.html#t:validation_result/0"},{"type":"module","title":"acme_url","doc":"ACME URL utilities module.\n\nThis module provides URL parsing, validation, and manipulation utilities\nfor ACME (Automatic Certificate Management Environment) operations.\nIt handles URL decomposition, directory URL determination, and header\nformat conversions needed for ACME protocol communication.","ref":"acme_url.html"},{"type":"function","title":"acme_url.determine_directory_from_account/1","doc":"Determines the ACME directory URL from an account record.\n\nThis function examines an ACME account's URL to determine whether\nit was created in the staging or production environment.\n\n@param Account The ACME account record\n@returns The directory URL string (staging or production)","ref":"acme_url.html#determine_directory_from_account/1"},{"type":"function","title":"acme_url.determine_directory_from_url/1","doc":"Determines the ACME directory URL from any ACME endpoint URL.\n\nThis function examines a URL to determine whether it belongs to the\nLet's Encrypt staging or production environment and returns the\nappropriate directory URL.\n\n@param Url Any ACME endpoint URL\n@returns The directory URL string (staging or production)","ref":"acme_url.html#determine_directory_from_url/1"},{"type":"function","title":"acme_url.extract_base_url/1","doc":"Extracts the base URL (scheme + host) from a complete URL.\n\nThis function parses a URL and returns only the scheme and host portion,\nwhich is useful for creating HTTP client connections.\n\nExamples:\nextract_base_url(\"https://acme-v02.api.letsencrypt.org/directory\")\n-> \"https://acme-v02.api.letsencrypt.org\"\n\n@param Url The complete URL string or binary\n@returns The base URL (e.g., \"https://example.com\") as string","ref":"acme_url.html#extract_base_url/1"},{"type":"function","title":"acme_url.extract_host_from_url/1","doc":"Extracts the host from a URL.\n\nThis function parses a URL and returns only the host portion as a binary,\nwhich is useful for host-based routing or validation.\n\nExamples:\nextract_host_from_url(\"https://acme-v02.api.letsencrypt.org/directory\")\n-> <<\"acme-v02.api.letsencrypt.org\">>\n\n@param Url The complete URL string or binary\n@returns The host portion as binary","ref":"acme_url.html#extract_host_from_url/1"},{"type":"function","title":"acme_url.extract_path_from_url/1","doc":"Extracts the path from a URL.\n\nThis function parses a URL and returns only the path portion,\nwhich is needed for HTTP request routing.\n\nExamples:\nextract_path_from_url(\"https://acme-v02.api.letsencrypt.org/directory\")\n-> \"/directory\"\n\n@param Url The complete URL string or binary\n@returns The path portion as string (always starts with \"/\")","ref":"acme_url.html#extract_path_from_url/1"},{"type":"function","title":"acme_url.headers_to_map/1","doc":"Converts header list to map format.\n\nThis function converts HTTP headers from the proplist format\n[{Key, Value}, ...] to a map format for easier manipulation.\nIt handles both string and binary keys/values.\n\n@param Headers List of {Key, Value} header tuples\n@returns Map of headers with binary keys and values","ref":"acme_url.html#headers_to_map/1"},{"type":"function","title":"acme_url.normalize_url/1","doc":"Normalizes a URL to a consistent string format.\n\nThis function ensures URLs are in a consistent format for processing,\nhandling both string and binary inputs and ensuring proper encoding.\n\n@param Url The URL to normalize\n@returns Normalized URL as string","ref":"acme_url.html#normalize_url/1"},{"type":"type","title":"acme_url.acme_account/0","doc":"ACME account record containing private key, URL, and key ID.","ref":"acme_url.html#t:acme_account/0"},{"type":"type","title":"acme_url.acme_environment/0","doc":"ACME environment type - staging or production.","ref":"acme_url.html#t:acme_environment/0"},{"type":"type","title":"acme_url.acme_order/0","doc":"ACME order record containing order details and status.","ref":"acme_url.html#t:acme_order/0"},{"type":"type","title":"acme_url.dns_challenge/0","doc":"DNS challenge record for domain validation.","ref":"acme_url.html#t:dns_challenge/0"},{"type":"type","title":"acme_url.domain_list/0","doc":"List of domain names as strings.","ref":"acme_url.html#t:domain_list/0"},{"type":"type","title":"acme_url.email_address/0","doc":"Email address as a string.","ref":"acme_url.html#t:email_address/0"},{"type":"type","title":"acme_url.request_state/0","doc":"Request state map with binary keys and arbitrary values.","ref":"acme_url.html#t:request_state/0"},{"type":"type","title":"acme_url.validation_result/0","doc":"Validation result map with binary keys and values.","ref":"acme_url.html#t:validation_result/0"},{"type":"module","title":"ssl_cert_challenge","doc":"SSL Certificate challenge management module.\n\nThis module handles DNS challenge validation, polling, and status management\nfor SSL certificate requests. It provides functions to validate challenges\nwith Let's Encrypt, poll for completion, and handle timeouts and retries.\n\nThe module implements the complete challenge validation workflow including\ninitial validation triggering, status polling, and result formatting.","ref":"ssl_cert_challenge.html"},{"type":"function","title":"ssl_cert_challenge.all_challenges_valid/1","doc":"Checks if all validation results have valid status.\n\n@param Results List of validation result maps\n@returns true if all are valid, false otherwise","ref":"ssl_cert_challenge.html#all_challenges_valid/1"},{"type":"function","title":"ssl_cert_challenge.extract_challenge_info/1","doc":"Extracts challenge information from various challenge formats.\n\n@param Challenge Challenge in map or record format\n@returns {Domain, ChallengeRecord}","ref":"ssl_cert_challenge.html#extract_challenge_info/1"},{"type":"function","title":"ssl_cert_challenge.extract_domain_bin/1","doc":"Extracts domain as binary from challenge record or map.\n\nThis function extracts the domain name from a challenge record or map\nin various formats and returns it as a binary string.\n\n@param Challenge Challenge in various formats (map or record)\n@returns Domain as binary string","ref":"ssl_cert_challenge.html#extract_domain_bin/1"},{"type":"function","title":"ssl_cert_challenge.format_challenges_for_response/1","doc":"Formats challenges for user-friendly HTTP response.\n\nThis function converts internal challenge representations to a format\nsuitable for API responses, including DNS record instructions for\ndifferent DNS providers.\n\n@param Challenges List of DNS challenge maps from stored state\n@returns Formatted challenge list for HTTP response","ref":"ssl_cert_challenge.html#format_challenges_for_response/1"},{"type":"function","title":"ssl_cert_challenge.merge_validation_results/2","doc":"Merges validation results by domain, with retry results taking precedence.\n\n@param OriginalResults Original validation results\n@param RetryResults Retry validation results\n@returns Merged list of validation results","ref":"ssl_cert_challenge.html#merge_validation_results/2"},{"type":"function","title":"ssl_cert_challenge.poll_challenge_status/6","doc":"Polls a challenge status until it reaches a final state or times out.\n\n@param Account ACME account record\n@param ChallengeRecord DNS challenge record\n@param Domain Domain name for logging\n@param StartTime When validation started\n@param TimeoutSeconds Total timeout in seconds\n@param AttemptNum Current attempt number\n@returns Validation result map","ref":"ssl_cert_challenge.html#poll_challenge_status/6"},{"type":"function","title":"ssl_cert_challenge.poll_order_until_valid/3","doc":"Poll order status until valid or timeout.\n\n@param Account ACME account record\n@param State Current request state\n@param TimeoutSeconds Timeout in seconds\n@returns {Status, UpdatedState} or {error, Reason}","ref":"ssl_cert_challenge.html#poll_order_until_valid/3"},{"type":"function","title":"ssl_cert_challenge.results_to_domain_map/1","doc":"Converts validation results list to a domain-keyed map.\n\n@param Results List of validation result maps\n@returns Map with domain as key and result as value","ref":"ssl_cert_challenge.html#results_to_domain_map/1"},{"type":"function","title":"ssl_cert_challenge.validate_challenges_with_timeout/3","doc":"Validates DNS challenges with Let's Encrypt with polling and timeout.\n\nThis function triggers validation for each challenge and then polls the status\nuntil each challenge reaches a final state (valid/invalid) or times out.\nACME challenge validation is asynchronous, so we need to poll repeatedly.\n\n@param Account ACME account record\n@param Challenges List of DNS challenges\n@param TimeoutSeconds Timeout for validation in seconds\n@returns List of validation results","ref":"ssl_cert_challenge.html#validate_challenges_with_timeout/3"},{"type":"function","title":"ssl_cert_challenge.validate_dns_challenges_state/2","doc":"Validates DNS challenges and manages the complete validation workflow.\n\nThis function orchestrates the challenge validation process including:\n1. Extracting challenges from state\n2. Validating each challenge with timeout\n3. Handling order finalization if all challenges pass\n4. Managing retries for failed challenges\n5. Polling order status until completion\n\n@param State The current request state\n@param RSAPrivKey RSA private key\n@returns {ok, ValidationResponse} or {error, ErrorResponse}","ref":"ssl_cert_challenge.html#validate_dns_challenges_state/2"},{"type":"type","title":"ssl_cert_challenge.acme_account/0","doc":"ACME account record containing private key, URL, and key ID.","ref":"ssl_cert_challenge.html#t:acme_account/0"},{"type":"type","title":"ssl_cert_challenge.acme_environment/0","doc":"ACME environment type - staging or production.","ref":"ssl_cert_challenge.html#t:acme_environment/0"},{"type":"type","title":"ssl_cert_challenge.acme_order/0","doc":"ACME order record containing order details and status.","ref":"ssl_cert_challenge.html#t:acme_order/0"},{"type":"type","title":"ssl_cert_challenge.dns_challenge/0","doc":"DNS challenge record for domain validation.","ref":"ssl_cert_challenge.html#t:dns_challenge/0"},{"type":"type","title":"ssl_cert_challenge.domain_list/0","doc":"List of domain names as strings.","ref":"ssl_cert_challenge.html#t:domain_list/0"},{"type":"type","title":"ssl_cert_challenge.email_address/0","doc":"Email address as a string.","ref":"ssl_cert_challenge.html#t:email_address/0"},{"type":"type","title":"ssl_cert_challenge.request_state/0","doc":"Request state map with binary keys and arbitrary values.","ref":"ssl_cert_challenge.html#t:request_state/0"},{"type":"type","title":"ssl_cert_challenge.validation_result/0","doc":"Validation result map with binary keys and values.","ref":"ssl_cert_challenge.html#t:validation_result/0"},{"type":"module","title":"ssl_cert_ops","doc":"SSL Certificate operations module.\n\nThis module handles certificate-related operations including downloading\ncertificates from Let's Encrypt, processing certificate chains, and\nmanaging certificate storage and retrieval.\n\nThe module provides functions for the complete certificate lifecycle\nfrom download to storage and cleanup operations.","ref":"ssl_cert_ops.html"},{"type":"function","title":"ssl_cert_ops.delete_certificate/2","doc":"Deletes a stored SSL certificate.\n\nThis function removes certificate data associated with the specified domains.\nIn the current implementation, this is a simulated operation that logs\nthe deletion request.\n\n@param Domains List of domain names to delete\n@param _Opts Configuration options (currently unused)\n@returns {ok, DeletionResponse} or {error, ErrorResponse}","ref":"ssl_cert_ops.html#delete_certificate/2"},{"type":"function","title":"ssl_cert_ops.download_certificate_state/2","doc":"Downloads a certificate from Let's Encrypt using the request state.\n\nThis function extracts the necessary information from the request state,\ndownloads the certificate from Let's Encrypt, and returns the certificate\nin PEM format along with metadata.\n\n@param State The current request state containing order information\n@param _Opts Configuration options (currently unused)\n@returns {ok, DownloadResponse} or {error, ErrorResponse}","ref":"ssl_cert_ops.html#download_certificate_state/2"},{"type":"function","title":"ssl_cert_ops.extract_end_entity_cert/1","doc":"Extracts only the end-entity certificate from a PEM chain.\n\nThis function parses a PEM certificate chain and returns only the\nend-entity (leaf) certificate, which is typically the first certificate\nin the chain.\n\n@param CertPem Full certificate chain in PEM format\n@returns Only the end-entity certificate in PEM format","ref":"ssl_cert_ops.html#extract_end_entity_cert/1"},{"type":"function","title":"ssl_cert_ops.process_certificate_request/2","doc":"Processes a validated certificate request by creating ACME components.\n\nThis function orchestrates the certificate request process:\n1. Creates an ACME account with Let's Encrypt\n2. Submits a certificate order\n3. Generates DNS challenges\n4. Creates and returns the request state\n\n@param ValidatedParams Map of validated request parameters\n@param Wallet Wallet record\n@returns {ok, Map} with request details or {error, Reason}","ref":"ssl_cert_ops.html#process_certificate_request/2"},{"type":"function","title":"ssl_cert_ops.renew_certificate/2","doc":"Renews an existing SSL certificate.\n\nThis function initiates renewal for an existing certificate by creating\na new certificate request with the same parameters as the original.\nIt reads the configuration from the provided options and creates a new\ncertificate request.\n\n@param Domains List of domain names to renew\n@param Opts Configuration options containing SSL settings\n@returns {ok, RenewalResponse} or {error, ErrorResponse}","ref":"ssl_cert_ops.html#renew_certificate/2"},{"type":"type","title":"ssl_cert_ops.acme_account/0","doc":"ACME account record containing private key, URL, and key ID.","ref":"ssl_cert_ops.html#t:acme_account/0"},{"type":"type","title":"ssl_cert_ops.acme_environment/0","doc":"ACME environment type - staging or production.","ref":"ssl_cert_ops.html#t:acme_environment/0"},{"type":"type","title":"ssl_cert_ops.acme_order/0","doc":"ACME order record containing order details and status.","ref":"ssl_cert_ops.html#t:acme_order/0"},{"type":"type","title":"ssl_cert_ops.dns_challenge/0","doc":"DNS challenge record for domain validation.","ref":"ssl_cert_ops.html#t:dns_challenge/0"},{"type":"type","title":"ssl_cert_ops.domain_list/0","doc":"List of domain names as strings.","ref":"ssl_cert_ops.html#t:domain_list/0"},{"type":"type","title":"ssl_cert_ops.email_address/0","doc":"Email address as a string.","ref":"ssl_cert_ops.html#t:email_address/0"},{"type":"type","title":"ssl_cert_ops.request_state/0","doc":"Request state map with binary keys and arbitrary values.","ref":"ssl_cert_ops.html#t:request_state/0"},{"type":"type","title":"ssl_cert_ops.validation_result/0","doc":"Validation result map with binary keys and values.","ref":"ssl_cert_ops.html#t:validation_result/0"},{"type":"module","title":"ssl_cert_state","doc":"SSL Certificate state management module.\n\nThis module handles all state management operations for SSL certificate\nrequests including serialization, deserialization, persistence, and\nstate transformations between internal records and external map formats.\n\nThe module provides a clean interface for storing and retrieving certificate\nrequest state while hiding the complexity of format conversions.","ref":"ssl_cert_state.html"},{"type":"function","title":"ssl_cert_state.create_request_state/4","doc":"Creates a complete request state map from ACME components.\n\nThis function takes the core ACME components (account, order, challenges)\nand additional parameters to create a comprehensive state map that can\nbe stored and later used to continue the certificate request process.\n\n@param Account The ACME account record\n@param Order The ACME order record\n@param Challenges List of DNS challenge records\n@param ValidatedParams The validated request parameters\n@returns Complete request state map","ref":"ssl_cert_state.html#create_request_state/4"},{"type":"function","title":"ssl_cert_state.deserialize_account/1","doc":"Deserializes an account map back to an ACME account record.\n\n@param AccountMap The serialized account map\n@returns ACME account record","ref":"ssl_cert_state.html#deserialize_account/1"},{"type":"function","title":"ssl_cert_state.deserialize_challenges/1","doc":"Deserializes a list of challenge maps back to DNS challenge records.\n\n@param ChallengeMaps List of serialized challenge maps\n@returns List of DNS challenge records","ref":"ssl_cert_state.html#deserialize_challenges/1"},{"type":"function","title":"ssl_cert_state.deserialize_order/1","doc":"Deserializes an order map back to an ACME order record.\n\n@param OrderMap The serialized order map\n@returns ACME order record","ref":"ssl_cert_state.html#deserialize_order/1"},{"type":"function","title":"ssl_cert_state.deserialize_private_key/1","doc":"Deserializes a PEM-encoded private key back to RSA record.\n\n@param PemKey The PEM-encoded private key string\n@returns RSA private key record","ref":"ssl_cert_state.html#deserialize_private_key/1"},{"type":"function","title":"ssl_cert_state.extract_account_from_state/1","doc":"Extracts and deserializes the account from request state.\n\n@param State The request state map\n@returns ACME account record","ref":"ssl_cert_state.html#extract_account_from_state/1"},{"type":"function","title":"ssl_cert_state.extract_challenges_from_state/1","doc":"Extracts and deserializes the challenges from request state.\n\n@param State The request state map\n@returns List of DNS challenge records","ref":"ssl_cert_state.html#extract_challenges_from_state/1"},{"type":"function","title":"ssl_cert_state.extract_order_from_state/1","doc":"Extracts and deserializes the order from request state.\n\n@param State The request state map\n@returns ACME order record","ref":"ssl_cert_state.html#extract_order_from_state/1"},{"type":"function","title":"ssl_cert_state.serialize_account/1","doc":"Serializes an ACME account record to a map.\n\n@param Account The ACME account record\n@returns Serialized account map","ref":"ssl_cert_state.html#serialize_account/1"},{"type":"function","title":"ssl_cert_state.serialize_challenges/1","doc":"Serializes a list of DNS challenge records to maps.\n\n@param Challenges List of DNS challenge records\n@returns List of serialized challenge maps","ref":"ssl_cert_state.html#serialize_challenges/1"},{"type":"function","title":"ssl_cert_state.serialize_order/1","doc":"Serializes an ACME order record to a map.\n\n@param Order The ACME order record\n@returns Serialized order map","ref":"ssl_cert_state.html#serialize_order/1"},{"type":"function","title":"ssl_cert_state.serialize_private_key/1","doc":"Serializes an RSA private key to PEM format for storage.\n\n@param PrivateKey The RSA private key record\n@returns PEM-encoded private key as string","ref":"ssl_cert_state.html#serialize_private_key/1"},{"type":"function","title":"ssl_cert_state.serialize_wallet_private_key/1","doc":"Serializes wallet private key components to PEM format for nginx.\n\nThis function extracts the RSA components from the wallet and creates\na proper nginx-compatible private key. The key will match the one used\nin CSR generation to ensure certificate compatibility.\n\n@param WalletTuple The complete wallet tuple containing RSA components\n@returns PEM-encoded private key as string","ref":"ssl_cert_state.html#serialize_wallet_private_key/1"},{"type":"function","title":"ssl_cert_state.update_order_in_state/2","doc":"Updates the order information in a request state.\n\n@param State The current request state\n@param UpdatedOrder The updated ACME order record\n@returns Updated request state","ref":"ssl_cert_state.html#update_order_in_state/2"},{"type":"type","title":"ssl_cert_state.acme_account/0","doc":"ACME account record containing private key, URL, and key ID.","ref":"ssl_cert_state.html#t:acme_account/0"},{"type":"type","title":"ssl_cert_state.acme_environment/0","doc":"ACME environment type - staging or production.","ref":"ssl_cert_state.html#t:acme_environment/0"},{"type":"type","title":"ssl_cert_state.acme_order/0","doc":"ACME order record containing order details and status.","ref":"ssl_cert_state.html#t:acme_order/0"},{"type":"type","title":"ssl_cert_state.dns_challenge/0","doc":"DNS challenge record for domain validation.","ref":"ssl_cert_state.html#t:dns_challenge/0"},{"type":"type","title":"ssl_cert_state.domain_list/0","doc":"List of domain names as strings.","ref":"ssl_cert_state.html#t:domain_list/0"},{"type":"type","title":"ssl_cert_state.email_address/0","doc":"Email address as a string.","ref":"ssl_cert_state.html#t:email_address/0"},{"type":"type","title":"ssl_cert_state.request_state/0","doc":"Request state map with binary keys and arbitrary values.","ref":"ssl_cert_state.html#t:request_state/0"},{"type":"type","title":"ssl_cert_state.validation_result/0","doc":"Validation result map with binary keys and values.","ref":"ssl_cert_state.html#t:validation_result/0"},{"type":"module","title":"ssl_cert_validation","doc":"SSL Certificate validation module.\n\nThis module provides comprehensive validation functions for SSL certificate\nrequest parameters including domain names, email addresses, and ACME\nenvironment settings. It ensures all inputs meet the requirements for\nLet's Encrypt certificate issuance.\n\nThe module includes detailed error reporting to help users correct\ninvalid parameters quickly.","ref":"ssl_cert_validation.html"},{"type":"function","title":"ssl_cert_validation.is_valid_domain/1","doc":"Checks if a domain name is valid according to DNS standards.\n\nThis function validates domain names according to RFC 1123 and RFC 952:\n- Labels can contain letters, numbers, and hyphens\n- Labels cannot start or end with hyphens\n- Labels cannot exceed 63 characters\n- Total domain length cannot exceed 253 characters\n- Domain must have at least one dot (except for localhost-style names)\n\n@param Domain Domain name string\n@returns true if valid, false otherwise","ref":"ssl_cert_validation.html#is_valid_domain/1"},{"type":"function","title":"ssl_cert_validation.is_valid_email/1","doc":"Checks if an email address is valid according to basic RFC standards.\n\nThis function performs basic email validation:\n- Must contain exactly one @ symbol\n- Local part (before @) must be valid\n- Domain part (after @) must be valid\n- No consecutive dots\n- No dots adjacent to @ symbol\n\n@param Email Email address string\n@returns true if valid, false otherwise","ref":"ssl_cert_validation.html#is_valid_email/1"},{"type":"function","title":"ssl_cert_validation.validate_domains/1","doc":"Validates a list of domain names.\n\nThis function validates that:\n- Domains parameter is provided and is a list\n- All domains are valid according to DNS naming rules\n- At least one domain is provided\n- All domains pass individual validation checks\n\n@param Domains List of domain names or not_found\n@returns {ok, [ValidDomain]} or {error, Reason}","ref":"ssl_cert_validation.html#validate_domains/1"},{"type":"function","title":"ssl_cert_validation.validate_email/1","doc":"Validates an email address.\n\nThis function validates that:\n- Email parameter is provided\n- Email format follows basic RFC standards\n- Email doesn't contain invalid patterns\n\n@param Email Email address or not_found\n@returns {ok, ValidEmail} or {error, Reason}","ref":"ssl_cert_validation.html#validate_email/1"},{"type":"function","title":"ssl_cert_validation.validate_environment/1","doc":"Validates the ACME environment.\n\nThis function validates that the environment is either 'staging' or 'production'.\nIt accepts both atom and binary formats and normalizes to atom format.\n\n@param Environment Environment atom or binary\n@returns {ok, ValidEnvironment} or {error, Reason}","ref":"ssl_cert_validation.html#validate_environment/1"},{"type":"function","title":"ssl_cert_validation.validate_request_params/3","doc":"Validates certificate request parameters.\n\nThis function performs comprehensive validation of all required parameters\nfor a certificate request including domains, email, and environment.\nIt returns a validated parameter map or detailed error information.\n\n@param Domains List of domain names or not_found\n@param Email Contact email address or not_found\n@param Environment ACME environment (staging/production)\n@returns {ok, ValidatedParams} or {error, Reason}","ref":"ssl_cert_validation.html#validate_request_params/3"},{"type":"type","title":"ssl_cert_validation.acme_account/0","doc":"ACME account record containing private key, URL, and key ID.","ref":"ssl_cert_validation.html#t:acme_account/0"},{"type":"type","title":"ssl_cert_validation.acme_environment/0","doc":"ACME environment type - staging or production.","ref":"ssl_cert_validation.html#t:acme_environment/0"},{"type":"type","title":"ssl_cert_validation.acme_order/0","doc":"ACME order record containing order details and status.","ref":"ssl_cert_validation.html#t:acme_order/0"},{"type":"type","title":"ssl_cert_validation.dns_challenge/0","doc":"DNS challenge record for domain validation.","ref":"ssl_cert_validation.html#t:dns_challenge/0"},{"type":"type","title":"ssl_cert_validation.domain_list/0","doc":"List of domain names as strings.","ref":"ssl_cert_validation.html#t:domain_list/0"},{"type":"type","title":"ssl_cert_validation.email_address/0","doc":"Email address as a string.","ref":"ssl_cert_validation.html#t:email_address/0"},{"type":"type","title":"ssl_cert_validation.request_state/0","doc":"Request state map with binary keys and arbitrary values.","ref":"ssl_cert_validation.html#t:request_state/0"},{"type":"type","title":"ssl_cert_validation.validation_result/0","doc":"Validation result map with binary keys and values.","ref":"ssl_cert_validation.html#t:validation_result/0"},{"type":"module","title":"ssl_utils","doc":"SSL Certificate utility module.\n\nThis module provides utility functions for SSL certificate management\nincluding error formatting, response building, and common helper functions\nused across the SSL certificate system.\n\nThe module centralizes formatting logic and provides consistent error\nhandling and response generation for the SSL certificate system.","ref":"ssl_utils.html"},{"type":"function","title":"ssl_utils.bin/1","doc":"Coerce a value to a binary.","ref":"ssl_utils.html#bin/1"},{"type":"function","title":"ssl_utils.build_error_response/2","doc":"Builds a standardized error response.\n\n@param StatusCode HTTP status code\n@param ErrorMessage Error message as binary\n@returns Standardized error response tuple","ref":"ssl_utils.html#build_error_response/2"},{"type":"function","title":"ssl_utils.build_success_response/2","doc":"Builds a standardized success response.\n\n@param StatusCode HTTP status code\n@param Body Response body map\n@returns Standardized success response tuple","ref":"ssl_utils.html#build_success_response/2"},{"type":"function","title":"ssl_utils.format_error_details/1","doc":"Formats error details for user-friendly display.\n\nThis function takes various error reason formats and converts them\nto user-friendly binary strings suitable for API responses.\n\n@param ErrorReason The error reason to format\n@returns Formatted error details as binary","ref":"ssl_utils.html#format_error_details/1"},{"type":"function","title":"ssl_utils.format_validation_error/1","doc":"Formats validation errors for consistent API responses.\n\n@param ValidationError Validation error message\n@returns Formatted validation error response","ref":"ssl_utils.html#format_validation_error/1"},{"type":"function","title":"ssl_utils.http_get/1","doc":"Makes an HTTP GET request using gun.\n\n@param Url The target URL (string or binary)\n@returns {ok, StatusCode, ResponseHeaders, ResponseBody} | {error, Reason}","ref":"ssl_utils.html#http_get/1"},{"type":"function","title":"ssl_utils.http_head/1","doc":"Makes an HTTP HEAD request using gun.\n\n@param Url The target URL (string or binary)\n@returns {ok, StatusCode, ResponseHeaders, ResponseBody} | {error, Reason}","ref":"ssl_utils.html#http_head/1"},{"type":"function","title":"ssl_utils.http_post/3","doc":"Makes an HTTP POST request using gun.\n\n@param Url The target URL (string or binary)\n@param Headers List of header tuples\n@param Body Request body as binary\n@returns {ok, StatusCode, ResponseHeaders, ResponseBody} | {error, Reason}","ref":"ssl_utils.html#http_post/3"},{"type":"function","title":"ssl_utils.json_decode/1","doc":"Takes a JSON string and decodes it into an Erlang term.","ref":"ssl_utils.html#json_decode/1"},{"type":"function","title":"ssl_utils.json_decode/2","doc":"Takes a JSON string and decodes it into an Erlang term.","ref":"ssl_utils.html#json_decode/2"},{"type":"function","title":"ssl_utils.json_encode/1","doc":"Takes a term in Erlang's native form and encodes it as a JSON string.","ref":"ssl_utils.html#json_encode/1"},{"type":"function","title":"ssl_utils.list/1","doc":"Coerce a value to a string list.","ref":"ssl_utils.html#list/1"},{"type":"function","title":"ssl_utils.normalize_domains/1","doc":"Normalizes domain input to a list of strings.\n\nThis function handles various input formats for domains and converts\nthem to a consistent list of strings format.\n\n@param Domains Domain input in various formats\n@returns List of domain strings","ref":"ssl_utils.html#normalize_domains/1"},{"type":"function","title":"ssl_utils.normalize_email/1","doc":"Normalizes email input to a string.\n\nThis function handles various input formats for email addresses and\nconverts them to a consistent string format.\n\n@param Email Email input in various formats\n@returns Email as string","ref":"ssl_utils.html#normalize_email/1"},{"type":"extras","title":"Overview","doc":"# SSL Certificate Library\n\nA comprehensive SSL certificate management library with Let's Encrypt ACME v2 support for Erlang/OTP applications.","ref":"readme.html"},{"type":"extras","title":"Index - Overview","doc":"- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Modules](#modules)\n- [Dependencies](#dependencies)\n- [Code Coverage](#code-coverage)\n- [Development Commands](#development-commands)","ref":"readme.html#index"},{"type":"extras","title":"Features - Overview","doc":"- Full ACME v2 protocol support\n- Let's Encrypt certificate automation  \n- DNS and HTTP-01 challenge support\n- Certificate lifecycle management\n- Cryptographic operations for certificate handling\n- Comprehensive validation and state management\n- Modern HTTP/2 client using gun","ref":"readme.html#features"},{"type":"extras","title":"Installation - Overview","doc":"Add this library to your `rebar.config` dependencies:\n\n```erlang\n{deps, [\n    {ssl_cert, {git, \"https://github.com/permaweb/ssl_cert.git\", {branch, \"main\"}}}\n]}.\n```","ref":"readme.html#installation"},{"type":"extras","title":"Usage - Overview","doc":"","ref":"readme.html#usage"},{"type":"extras","title":"Device Configuration - Overview","doc":"Configure the SSL certificate device with the required options:\n\n```erlang\n%% Configuration for SSL certificate requests\nOpts = #{\n    <<\"ssl_opts\">> => #{\n        <<\"domains\">> => [<<\"example.com\">>, <<\"www.example.com\">>],\n        <<\"email\">> => <<\"admin@example.com\">>,\n        <<\"environment\">> => <<\"staging\">>  % Use \"production\" for live certificates\n    }\n}.\n```","ref":"readme.html#device-configuration"},{"type":"extras","title":"Certificate Request Workflow - Overview","doc":"#### Step 1: Request Certificate\n```erlang\n%% Initiate certificate request - returns DNS challenges\n{ok, Response} = dev_ssl_cert:request(undefined, undefined, Opts),\n#{<<\"body\">> := #{\n    <<\"challenges\">> := Challenges,\n    <<\"message\">> := <<\"Create DNS TXT records for the following challenges, then call finalize\">>\n}} = Response.\n```\n\n#### Step 2: Set DNS TXT Records\nBased on the returned challenges, create DNS TXT records:\n```\n_acme-challenge.example.com.     TXT \"challenge_token_here\"\n_acme-challenge.www.example.com. TXT \"challenge_token_here\"\n```\n\n#### Step 3: Finalize Certificate\n```erlang\n%% After DNS records are set, finalize the certificate\n{ok, FinalResponse} = dev_ssl_cert:finalize(undefined, undefined, Opts),\n#{<<\"body\">> := #{\n    <<\"certificate_pem\">> := CertPem,\n    <<\"key_pem\">> := KeyPem,\n    <<\"domains\">> := Domains\n}} = FinalResponse.\n```","ref":"readme.html#certificate-request-workflow"},{"type":"extras","title":"Certificate Management - Overview","doc":"#### Renew Certificate\n```erlang\n%% Renew existing certificate\nRenewOpts = #{\n    <<\"ssl_opts\">> => #{\n        <<\"domains\">> => [<<\"example.com\">>, <<\"www.example.com\">>],\n        <<\"email\">> => <<\"admin@example.com\">>,\n        <<\"environment\">> => <<\"production\">>\n    }\n},\n{ok, RenewResponse} = dev_ssl_cert:renew(undefined, undefined, RenewOpts).\n```\n\n#### Delete Certificate\n```erlang\n%% Delete stored certificate\nDeleteOpts = #{\n    <<\"ssl_opts\">> => #{\n        <<\"domains\">> => [<<\"example.com\">>, <<\"www.example.com\">>]\n    }\n},\n{ok, DeleteResponse} = dev_ssl_cert:delete(undefined, undefined, DeleteOpts).\n```","ref":"readme.html#certificate-management"},{"type":"extras","title":"Environment Configuration - Overview","doc":"#### Staging Environment (for testing)\n```erlang\nStagingOpts = #{\n    <<\"ssl_opts\">> => #{\n        <<\"domains\">> => [<<\"test.example.com\">>],\n        <<\"email\">> => <<\"test@example.com\">>,\n        <<\"environment\">> => <<\"staging\">>\n    }\n}.\n```\n\n#### Production Environment\n```erlang\nProductionOpts = #{\n    <<\"ssl_opts\">> => #{\n        <<\"domains\">> => [<<\"example.com\">>],\n        <<\"email\">> => <<\"admin@example.com\">>,\n        <<\"environment\">> => <<\"production\">>\n    }\n}.\n```","ref":"readme.html#environment-configuration"},{"type":"extras","title":"Direct Module Usage - Overview","doc":"For advanced use cases, you can call the underlying modules directly:\n\n```erlang\n%% Validate request parameters\n{ok, ValidatedParams} = ssl_cert_validation:validate_request_params(\n    [<<\"example.com\">>], <<\"admin@example.com\">>, <<\"staging\">>),\n\n%% Process certificate request\n{ok, ProcessResponse} = ssl_cert_ops:process_certificate_request(ValidatedParams, Wallet),\n\n%% Validate DNS challenges\n{ok, ValidationResponse} = ssl_cert_challenge:validate_dns_challenges_state(RequestState, PrivateKey),\n\n%% Generate CSR\n{ok, {CsrDer, PrivateKey}} = acme_csr:generate_csr([<<\"example.com\">>], #{}).\n```","ref":"readme.html#direct-module-usage"},{"type":"extras","title":"Modules - Overview","doc":"- **`acme_client`** - Main ACME client API\n- **`ssl_cert_ops`** - High-level certificate operations\n- **`acme_protocol`** - Core ACME protocol implementation\n- **`acme_crypto`** - Cryptographic operations and JWS\n- **`acme_csr`** - Certificate Signing Request generation\n- **`ssl_cert_challenge`** - Challenge handling and validation\n- **`ssl_cert_validation`** - Certificate validation utilities\n- **`ssl_cert_state`** - State management utilities\n- **`ssl_utils`** - Utility functions and HTTP client","ref":"readme.html#modules"},{"type":"extras","title":"Dependencies - Overview","doc":"- `gun` - Modern HTTP/2 client for ACME communication\n- `crypto` - Cryptographic operations\n- `public_key` - Public key operations\n- `ssl` - SSL/TLS support\n- `inets` - Additional HTTP utilities","ref":"readme.html#dependencies"},{"type":"extras","title":"Code Coverage - Overview","doc":"Current test coverage across all modules:\n\n| Module | Coverage |\n|--------|----------|\n| **Core Modules** | |\n| `acme_client` | 25% |\n| `acme_crypto` | 65% |\n| `acme_csr` | 81% |\n| `acme_http` | 49% |\n| `acme_protocol` | 26% |\n| `acme_url` | 100% |\n| `ssl_cert_challenge` | 18% |\n| `ssl_cert_ops` | 24% |\n| `ssl_cert_state` | 65% |\n| `ssl_cert_validation` | 95% |\n| `ssl_utils` | 29% |\n| **Test Modules** | |\n| `acme_client_tests` | 91% |\n| `acme_crypto_tests` | 100% |\n| `acme_csr_tests` | 91% |\n| `acme_http_tests` | 100% |\n| `acme_protocol_tests` | 91% |\n| `acme_url_tests` | 100% |\n| `ssl_cert_challenge_tests` | 100% |\n| `ssl_cert_integration_tests` | 100% |\n| `ssl_cert_ops_tests` | 100% |\n| `ssl_cert_state_tests` | 100% |\n| `ssl_cert_test_suite` | 10% |\n| `ssl_cert_validation_tests` | 100% |\n| `ssl_utils_tests` | 100% |\n| **Total Coverage** | **68%** |","ref":"readme.html#code-coverage"},{"type":"extras","title":"Coverage Analysis - Overview","doc":"- **High Coverage (80%+)**: `acme_csr`, `acme_url`, `ssl_cert_validation`\n- **Medium Coverage (50-79%)**: `acme_crypto`, `ssl_cert_state`\n- **Low Coverage (<50%)**: `acme_client`, `acme_http`, `acme_protocol`, `ssl_cert_challenge`, `ssl_cert_ops`, `ssl_utils`","ref":"readme.html#coverage-analysis"},{"type":"extras","title":"Development Commands - Overview","doc":"","ref":"readme.html#development-commands"},{"type":"extras","title":"Code Quality and Formatting - Overview","doc":"```bash\n# Format all Erlang files\nrebar3 fmt\n\n# Check if files need formatting (don't modify)\nrebar3 fmt --check\n\n# Run linter to check code quality\nrebar3 lint\n```","ref":"readme.html#code-quality-and-formatting"},{"type":"extras","title":"Testing - Overview","doc":"```bash\n# Compile and run all tests\nrebar3 as test eunit\n\n# Run specific test module\nrebar3 as test eunit --module=my_module_tests\n```","ref":"readme.html#testing"},{"type":"extras","title":"Code Coverage - Overview","doc":"```bash\n# Run tests with coverage analysis\nrebar3 cover\n\n# Generate coverage reports\nrebar3 covertool generate\n\n# Full test and coverage workflow\nrebar3 as test eunit && rebar3 cover && rebar3 covertool generate\n```","ref":"readme.html#code-coverage"},{"type":"extras","title":"Development Workflow - Overview","doc":"```bash\n# Complete quality check before commit\nrebar3 clean\nrebar3 fmt --check\nrebar3 lint\nrebar3 as test compile\nrebar3 as test eunit\nrebar3 cover\nrebar3 covertool generate\n```","ref":"readme.html#development-workflow"},{"type":"extras","title":"License","doc":"The MIT License (MIT)\n\nCopyright (c) 2025, Peter Farber.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.","ref":"license.html"}],"proglang":"erlang","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.35.1"}}